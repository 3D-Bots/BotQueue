v1 Release - Goal: September 12, 2012

* Website:

  * add downloading state to job
    * add datetime field for every status mode

  * QA flow for jobs in the QA state
    * highlight QA required jobs better
    * test reject flow
    * form-ify and ajax-ify the QA page

	* Allow canceling of print jobs through website.
	  * similar error flow to QA failure

  * SSL certificate for botqueue.com
		* self-signed for dev
		* official / trusted (need to get emails setup!)

  * combine queue page into single list of all open jobs w/ tabs to limit based on job status
    * show bots / bot status on right side of page above statistics
    * ajaxify reloading of progress / page info.

* Bumblebee
  * test what happens when internet goes down at random times... must be failure tolerant!
    * wrap our API call in a try:catch all block and raise our own exception on network problems.
    
v2 Release - unknown date

* replace all appropriate form controls with new form helper class.

* nice GUI app
	High-level views:
		Dashboard: all bots w/ current status and active jobs.
		Add Bot: configure local bot settings (drivers, name, etc)
		Bot Detail:
			* all info available on this bot
			* current print status
			* pause print
			* cancel print
			* toggle bot status: online/offline/fixed/broken
	* Use python+webkit for UI

* Slicers + Profiles
* Pull in files from internet (Thingiverse, GrabCAD, etc)
* Reduce Amazon requirements for non-amazon / non-public installs.
* Private jobs?
* Add public / private queues.  Default to private.
* sqlite for local data storage
* bot current status / mini-dashboard with machine vitals
* grouping of jobs into batches or something?
* simple script for installing botqueue onto a standalone ubuntu machine
* full page statistics for bot / queue with graphs
* user area - figure out public / private stuff.
* new machine discovery
	* If new machines are found, it will prompt the user to register them.
	* Allow user to manually add new machines & configure them (serial port, speed, etc)
* API
	* implement job creation via URL download
	* implement job creation via HTTP file POST
		* use Poster to send HTTP files: http://atlee.ca/software/poster/
  * 100% working Amazon bootup script.
* job log history to see what bot did what to each job.
* Add computer name to app approval so we can show that on app page... remove access token for a certain computer.
* convert bot set status to ajax - figure out the proper way to handle taking bots online/offline... pause/unpause/stop?
* 2 new job statuses:
	* downloading
	* human required
* Use s3g python library for MakerBot machines
	