v1 Release - Goal: Sep 1, 2012

* Website:

	* Add content to /help
	* Add content to /app

  * 100% working Amazon bootup script.

	* security / privacy audit on controller / views
		* megaerror being followed?
		* assertLoggedIn() being used

  * SSL certificate for botqueue.
		* self-signed for dev
		* official / trusted (need to get emails setup!)

* API
	* make sure we have CRUD for all operations
	* verify that all calls in API V1 are implemented in python client (and functioning)

* App

	* setup actual logging: http://docs.python.org/howto/logging-cookbook.html
	* integrate authorize.py so it runs automatically on first run (or on auth related errors)

  * Some sort of inter-process communication system for telling worker processes what to do.
		* stop+drop job
		* online / offline
		* stop process
		
	* Method for website to communicate state change to active clients (ie: bot.offline -> bot.online)
		
	* some sort of flow to resolve bots in a bad state.

	* Driver based system for controlling multiple types of machines.
		* Use pronterface backend for passthrough style machines
		* Use s3g python interface for MakerBot machines

	* If new machines are found, it will prompt the user to register them.
	* Allow user to manually add new machines & configure them (serial port, speed, etc)
	* Allow toggling machine between online/offline states
		* Online = ready to take jobs
		* Offline = does not take jobs
	* Allow pausing / canceling of print jobs.
	
	* use Poster to send HTTP files: http://atlee.ca/software/poster/
	

v2 Release - unknown date

* replace all appropriate form controls with new form helper class.

* nice GUI app
	High-level views:
		Dashboard: all bots w/ current status and active jobs.
		Add Bot: configure local bot settings (drivers, name, etc)
		Bot Detail:
			* all info available on this bot
			* current print status
			* pause print
			* cancel print
			* toggle bot status: online/offline/fixed/broken
	* Use python+webkit for UI

* Slicers + Profiles
* Pull in files from internet (Thingiverse, GrabCAD, etc)
* Reduce Amazon requirements for non-amazon / non-public installs.
* Private jobs?
* Add public / private queues.  Default to private.
* sqlite for local data storage
* bot current status / mini-dashboard with machine vitals
* grouping of jobs into batches or something?
* simple script for installing botqueue onto a standalone ubuntu machine
* full page statistics for bot / queue with graphs
* user area - figure out public / private stuff.

* API
	* implement job creation via URL download
	* implement job creation via HTTP file POST
